"use strict";(self.webpackChunksnowflake_promise_website=self.webpackChunksnowflake_promise_website||[]).push([[3572],{343:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"examples/executing-queries/query-example-2","title":"Streaming Query Results","description":"Documentation","source":"@site/docs/examples/executing-queries/query-example-2.mdx","sourceDirName":"examples/executing-queries","slug":"/examples/executing-queries/query-example-2","permalink":"/snowflake-promise/docs/examples/executing-queries/query-example-2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"query-example-2","title":"Streaming Query Results"},"sidebar":"tutorialSidebar","previous":{"title":"Basic Query Execution","permalink":"/snowflake-promise/docs/examples/executing-queries/query-example-1"},"next":{"title":"Canceling an In-Progress Query","permalink":"/snowflake-promise/docs/examples/executing-queries/query-example-3"}}');var s=t(4848),i=t(8453);const a={id:"query-example-2",title:"Streaming Query Results"},o=void 0,l={},c=[{value:"Documentation",id:"documentation",level:2},{value:"Modern Streaming with <code>for await</code>",id:"modern-streaming-with-for-await",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Example",id:"example",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.snowflake.com/en/developer-guide/node-js/nodejs-driver-consume#streaming-results",children:"Snowflake SDK Documentation"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Streaming allows you to process large datasets without loading all results into memory at once, preventing out-of-memory errors and improving efficiency."}),"\n",(0,s.jsxs)(n.h2,{id:"modern-streaming-with-for-await",children:["Modern Streaming with ",(0,s.jsx)(n.code,{children:"for await"})]}),"\n",(0,s.jsxs)(n.p,{children:["Traditional streaming uses event handlers like ",(0,s.jsx)(n.code,{children:'on("data")'})," and ",(0,s.jsx)(n.code,{children:'on("end")'}),". This example demonstrates the much simpler ",(0,s.jsx)(n.code,{children:"for await"})," pattern, which makes streaming as easy as iterating over an array."]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You've ",(0,s.jsx)(n.a,{href:"../../connecting",children:"established a connection"})," to Snowflake and promisified it"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Optional: TypeScript interface for strongly-typed results\ninterface Customer {\n  C_CUSTKEY: number;\n  C_NAME: string;\n  C_PHONE: string;\n  C_ACCTBAL: number;\n}\n\n// Execute query with streamResult: true\nconst { statement } = connection.execute<Customer>({\n  sqlText: `\n    SELECT C_CUSTKEY, C_NAME, C_PHONE, C_ACCTBAL\n    FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER\n    WHERE C_MKTSEGMENT = ?\n  `,\n  binds: ['AUTOMOBILE'],\n  streamResult: true\n});\n\n// Create a stream (optionally specify start/end for a subset)\nconst stream = statement.streamRows({\n  start: 250,\n  end: 300\n});\n\n// Process results one row at a time with for await\nfor await (const row of stream) {\n  console.log(`Customer: ${row.C_NAME}, Balance: ${row.C_ACCTBAL}`);\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);