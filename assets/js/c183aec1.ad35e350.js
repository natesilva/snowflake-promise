"use strict";(self.webpackChunksnowflake_promise_website=self.webpackChunksnowflake_promise_website||[]).push([[1074],{5537:(e,n,t)=>{t.d(n,{A:()=>w});var s=t(6540),r=t(4164),a=t(5627),i=t(6347),o=t(372),l=t(604),c=t(1861),u=t(8749);function d(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:r}}=e;return{value:n,label:t,attributes:s,default:r}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,a=h(e),[i,l]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a}))),[c,d]=p({queryString:t,groupId:r}),[x,y]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,a]=(0,u.Dv)(t);return[r,(0,s.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:r}),f=(()=>{const e=c??x;return m({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),y(e)}),[d,y,a]),tabValues:a}}var y=t(9136);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function j(e){let{className:n,block:t,selectedValue:s,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),r=o[t].value;r!==s&&(c(n),i(r))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{l.push(e)},onKeyDown:d,onClick:u,...a,className:(0,r.A)("tabs__item",f.tabItem,a?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function g(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=x(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,b.jsx)(j,{...n,...e}),(0,b.jsx)(g,{...n,...e})]})}function w(e){const n=(0,y.A)();return(0,b.jsx)(v,{...e,children:d(e.children)},String(n))}},6248:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"comparisons/comparison-3-async-queries","title":"Comparison: Executing a Query (Async)","description":"The Snowflake SDK lets you execute queries asynchronously. Using the Promise Helper Library makes this process significantly easier.","source":"@site/docs/comparisons/comparison-3.mdx","sourceDirName":"comparisons","slug":"/comparisons/comparison-3-async-queries","permalink":"/snowflake-promise/docs/comparisons/comparison-3-async-queries","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"comparison-3-async-queries","title":"Comparison: Executing a Query (Async)"},"sidebar":"tutorialSidebar","previous":{"title":"Comparison: Executing a Statement","permalink":"/snowflake-promise/docs/comparisons/comparison-2-executing-a-statement"},"next":{"title":"Comparison: Streaming Results","permalink":"/snowflake-promise/docs/comparisons/comparison-4-streaming"}}');var r=t(4848),a=t(8453),i=t(5537),o=t(9329);const l={id:"comparison-3-async-queries",title:"Comparison: Executing a Query (Async)"},c=void 0,u={},d=[{value:"First Example",id:"first-example",level:3},{value:"Second Example",id:"second-example",level:3},{value:"Examples",id:"examples",level:2},{value:"Example 1",id:"example-1",level:3},{value:"Example 2",id:"example-2",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The Snowflake SDK lets you execute queries asynchronously. Using the Promise Helper Library makes this process significantly easier."}),"\n",(0,r.jsx)(n.p,{children:"We have two examples here, each based on one of the examples in the SDK documentation."}),"\n",(0,r.jsx)(n.h3,{id:"first-example",children:"First Example"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Without"})," the Promise Helper Library, to implement the first example:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Manually wrap the query execution in a ",(0,r.jsx)(n.code,{children:"Promise"})," so that the query ID will be available before the results are streamed."]}),"\n",(0,r.jsxs)(n.li,{children:["Execute the query with the ",(0,r.jsx)(n.code,{children:"asyncExec"})," option set to ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["This causes your ",(0,r.jsx)(n.code,{children:"complete"})," callback to be invoked before the query is complete. Within that callback, call ",(0,r.jsx)(n.code,{children:"stmt.getQueryId()"}),", saving it to a variable in an outer scope."]}),"\n",(0,r.jsxs)(n.li,{children:["In the outer scope, call ",(0,r.jsx)(n.code,{children:"connection.getResultsFromQueryId()"})," with the query ID. This returns a ",(0,r.jsx)(n.code,{children:"statement"})," object."]}),"\n",(0,r.jsxs)(n.li,{children:["From the ",(0,r.jsx)(n.code,{children:"statement"})," object, get a stream using ",(0,r.jsx)(n.code,{children:"statement.streamRows()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Receive the results of the query by adding callback listeners for ",(0,r.jsx)(n.code,{children:"data"}),", ",(0,r.jsx)(n.code,{children:"error"}),", and ",(0,r.jsx)(n.code,{children:"end"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["When you use ",(0,r.jsx)(n.code,{children:"asyncExec"}),", your ",(0,r.jsx)(n.code,{children:"complete"})," callback is invoked before the query is complete. That means it does not receive the ",(0,r.jsx)(n.code,{children:"rows"})," results. That\u2019s why you need to stream the results."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"With"})," the Promise Helper Library, to implement the first example:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Execute the query."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"await"})," the results."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"second-example",children:"Second Example"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Without"})," the Promise Helper Library, to implement the second example:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Manually wrap the query execution in a ",(0,r.jsx)(n.code,{children:"Promise"})," so that the query ID will be available before the results are streamed."]}),"\n",(0,r.jsxs)(n.li,{children:["Execute the query with the ",(0,r.jsx)(n.code,{children:"asyncExec"})," option set to ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["This causes your ",(0,r.jsx)(n.code,{children:"complete"})," callback to be invoked before the query is complete. Within that callback, call ",(0,r.jsx)(n.code,{children:"stmt.getQueryId()"}),", saving it to a variable in an outer scope."]}),"\n",(0,r.jsxs)(n.li,{children:["In the outer scope, implement a timer and poll ",(0,r.jsx)(n.code,{children:"connection.getQueryStatus"})," until the query is complete."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"With"})," the Promise Helper Library, to implement the second example:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Execute the query with the ",(0,r.jsx)(n.code,{children:"asyncExec"})," option set to ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"await"})," the resultsPromise to ensure that the statement is ready."]}),"\n",(0,r.jsxs)(n.li,{children:["Implement a timer and poll ",(0,r.jsx)(n.code,{children:"connection.getQueryStatus"})," until the query is complete."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"example-1",children:"Example 1"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Click "WITHOUT Helper Library" to see the original code'}),"\n",(0,r.jsx)(n.li,{children:'Click "WITH Helper Library" to see the improved code using this library'}),"\n"]})}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(o.A,{value:"example-without",label:"WITHOUT Helper Library",children:[(0,r.jsxs)(n.p,{children:["Based on an example ",(0,r.jsx)(n.a,{href:"https://docs.snowflake.com/en/developer-guide/node-js/nodejs-driver-execute#execute-queries-asynchronously",children:"from the Snowflake documentation"}),"."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Not using the Promise Helper Library\n\nlet queryId;\n\n// 1. Execute query with asyncExec set to true\nawait new Promise((resolve) =>\n{\n  connection.execute({\n    sqlText: 'CALL SYSTEM$WAIT(3, \\'SECONDS\\')',\n    asyncExec: true,\n    complete: async function (err, stmt, rows)\n    {\n      queryId = stmt.getQueryId(); // Get the query ID\n      resolve();\n    }\n  });\n});\n\n// 2. Get results using the query ID\nconst statement = await connection.getResultsFromQueryId({ queryId: queryId });\nawait new Promise((resolve, reject) =>\n{\n  var stream = statement.streamRows();\n  stream.on('error', function (err)\n  {\n    reject(err);\n  });\n  stream.on('data', function (row)\n  {\n    console.log(row);\n  });\n  stream.on('end', function ()\n  {\n    resolve();\n  });\n});\n"})})]}),(0,r.jsx)(o.A,{value:"example-with",label:"WITH Helper Library",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Using the Promise Helper Library\n\nconst { resultsPromise } = await connection.execute({\n  sqlText: `CALL SYSTEM$WAIT(3, 'SECONDS')`,\n});\n\nconst results = await resultsPromise;\nconsole.log(results);\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Click "WITHOUT Helper Library" to see the original code'}),"\n",(0,r.jsx)(n.li,{children:'Click "WITH Helper Library" to see the improved code using this library'}),"\n"]})}),"\n",(0,r.jsxs)(i.A,{children:[(0,r.jsxs)(o.A,{value:"example-without",label:"WITHOUT Helper Library",children:[(0,r.jsxs)(n.p,{children:["Based on an example ",(0,r.jsx)(n.a,{href:"https://docs.snowflake.com/en/developer-guide/node-js/nodejs-driver-execute#execute-queries-asynchronously",children:"from the Snowflake documentation"}),"."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Not using the Promise Helper Library\n\nlet queryId;\n\n// 1. Execute query with asyncExec set to true\nawait new Promise((resolve, reject) =>\n{\n  const statement = connection.execute({\n    sqlText: 'CALL SYSTEM$WAIT(3, \\'SECONDS\\')',\n    asyncExec: true,\n    complete: async function (err, stmt, rows)\n    {\n      queryId = statement.getQueryId();\n      resolve();\n    }\n  });\n});\n\n// 2. Check query status until it's finished executing\nconst seconds = 2;\nlet status = await connection.getQueryStatus(queryId);\nwhile (connection.isStillRunning(status))\n{\n  console.log(`Query status is ${status}, timeout for ${seconds} seconds`);\n\n  await new Promise((resolve) =>\n  {\n    setTimeout(() => resolve(), 1000 * seconds);\n  });\n\n  status = await connection.getQueryStatus(queryId);\n}\n\nconsole.log(`Query has finished executing, status is ${status}`);\n"})})]}),(0,r.jsx)(o.A,{value:"example-with",label:"WITH Helper Library",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Using the Promise Helper Library\n\nimport { setInterval } from \"timers/promises\";\n\nconst { statement, resultsPromise } = await connection.execute({\n  sqlText: `CALL SYSTEM$WAIT(3, 'SECONDS')`,\n  asyncExec: true,\n});\n\n// Because we used asyncExec, we will not receive any results from this\n// Promise. But we need to await it to ensure the statement is ready.\nawait resultsPromise;\nconst queryId = statement.getQueryId();\n\n// Check query status until it\u2019s finished executing\nfor await (const iteration_ of setInterval(2000)) {\n  const status = await connection.getQueryStatus(queryId);\n  if (!connection.isStillRunning(status as snowflake.QueryStatus)) {\n    break;\n  }\n}\n\nconst status = await connection.getQueryStatus(queryId);\nconsole.log(`Query has finished executing, status is ${status}`);\n"})})})]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},9329:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var s=t(4164);const r={tabItem:"tabItem_Ymn6"};var a=t(4848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,i),hidden:t,children:n})}}}]);