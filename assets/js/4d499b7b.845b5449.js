"use strict";(self.webpackChunksnowflake_promise_website=self.webpackChunksnowflake_promise_website||[]).push([[3572],{343:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"examples/executing-queries/query-example-2","title":"Example: Streaming Query","description":"Documentation","source":"@site/docs/examples/executing-queries/query-example-2.mdx","sourceDirName":"examples/executing-queries","slug":"/examples/executing-queries/query-example-2","permalink":"/snowflake-promise/docs/examples/executing-queries/query-example-2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"query-example-2","title":"Example: Streaming Query"},"sidebar":"tutorialSidebar","previous":{"title":"Example: Basic Query","permalink":"/snowflake-promise/docs/examples/executing-queries/query-example-1"},"next":{"title":"Example: Canceling an In-Progress Query","permalink":"/snowflake-promise/docs/examples/executing-queries/query-example-3"}}');var r=t(4848),i=t(8453);const a={id:"query-example-2",title:"Example: Streaming Query"},o=void 0,l={},c=[{value:"Documentation",id:"documentation",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Making streams easier to use",id:"making-streams-easier-to-use",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"Example Code: Streaming a Query",id:"example-code-streaming-a-query",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.snowflake.com/en/developer-guide/node-js/nodejs-driver-consume#streaming-results",children:"Snowflake SDK Documentation"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsx)(n.p,{children:"To process a large set of Snowflake results, use streaming. This lets you process huge datasets without loading the entire dataset into memory."}),"\n",(0,r.jsx)(n.p,{children:"Without streaming, all results load into memory at once, which can be inefficient or cause an out-of-memory error."}),"\n",(0,r.jsx)(n.p,{children:"With streaming, the results are served in batches, allowing you to process one row at a time."}),"\n",(0,r.jsx)(n.h3,{id:"making-streams-easier-to-use",children:"Making streams easier to use"}),"\n",(0,r.jsxs)(n.p,{children:["Examples in the Snowflake SDK documentation use stream events such as ",(0,r.jsx)(n.code,{children:'on("data")'})," and ",(0,r.jsx)(n.code,{children:'on("end")'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Streaming is now much easier with async iteration (",(0,r.jsx)(n.code,{children:"for await"}),"), as shown in the example below."]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You\u2019ve ",(0,r.jsx)(n.a,{href:"../../connecting",children:"established a connection"})," to Snowflake and promisified it using the ",(0,r.jsx)(n.code,{children:"snowflake-promise"})," library."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Execute the query, setting the ",(0,r.jsx)(n.code,{children:"streamResult"})," option to ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Create a stream from the statement that\u2019s returned."}),"\n",(0,r.jsx)(n.li,{children:"Consume the stream results."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-code-streaming-a-query",children:"Example Code: Streaming a Query"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Optional: TypeScript definition for the row type that we will\n// receive from the query\ninterface Customer {\n  C_CUSTKEY: number;\n  C_NAME: string;\n  C_PHONE: string;\n  C_ACCTBAL: number;\n}\n\nconst { statement } = await connection.execute<Customer>({\n  sqlText: `\n    SELECT C_CUSTKEY, C_NAME, C_PHONE, C_ACCTBAL\n    FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER\n    WHERE C_MKTSEGMENT = :1;\n  `,\n  binds: ['AUTOMOBILE'],\n  streamResult: true\n});\n\n// Create a stream from the statement that\u2019s returned.\n// You can process all of the rows, or you can process a subset of them\n// by passing the `start` and `end` options. Either way, you are\n// efficiently served one row at a time.\nconst stream = statement.streamRows({\n  start: 250,\n  end: 300\n});\n\n// Consume the stream one row at a time using async iteration\nfor await (const row of stream) {\n  console.log(row);\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);